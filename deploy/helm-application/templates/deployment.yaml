{{- include "cls-backend-application.validateCrossChartParams" . }}
{{- include "cls-backend-application.validateDatabaseConfig" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cls-backend-application.fullname" . }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "cls-backend-application.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  strategy:
    type: {{ .Values.deployment.strategy.type }}
    {{- if eq .Values.deployment.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.deployment.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.deployment.strategy.rollingUpdate.maxUnavailable }}
    {{- end }}
  selector:
    matchLabels:
      {{- include "cls-backend-application.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "cls-backend-application.selectorLabels" . | nindent 8 }}
        {{- with .Values.commonLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.config.metricsPort | quote }}
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      {{- if and (eq .Values.database.type "cloud-sql") .Values.database.cloudSql.enableProxy }}
      initContainers:
      # Cloud SQL Proxy sidecar for secure database connections
      - name: cloud-sql-proxy
        image: {{ .Values.database.cloudSql.proxyImage }}
        restartPolicy: Always
        args:
        - "--structured-logs"
        - "--port={{ .Values.database.cloudSql.proxyPort }}"
        - "--health-check"
        - "--http-address=0.0.0.0"
        - "--http-port=9801"
        - "{{ include "cls-backend-application.cloudSqlConnectionName" . }}"
        ports:
        - name: health
          containerPort: 9801
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        startupProbe:
          httpGet:
            path: /startup
            port: health
          periodSeconds: 1
          timeoutSeconds: 5
          failureThreshold: 20
        livenessProbe:
          httpGet:
            path: /liveness
            port: health
          initialDelaySeconds: 0
          periodSeconds: 60
          timeoutSeconds: 30
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /readiness
            port: health
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 12  # 60 seconds total before marking unready
      {{- end }}

      containers:
      - name: cls-backend
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.config.port }}
          protocol: TCP
        - name: metrics
          containerPort: {{ .Values.config.metricsPort }}
          protocol: TCP
        env:
        # Load configuration from ConfigMap
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: PORT
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: LOG_FORMAT
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: METRICS_ENABLED
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: METRICS_PORT
        - name: DISABLE_AUTH
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: DISABLE_AUTH
        - name: PUBSUB_CLUSTER_EVENTS_TOPIC
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: PUBSUB_CLUSTER_EVENTS_TOPIC
        - name: RECONCILIATION_ENABLED
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: RECONCILIATION_ENABLED
        - name: AGGREGATION_ENABLED
          valueFrom:
            configMapKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-config
              key: AGGREGATION_ENABLED

        # Load secrets from ESO-managed secrets
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.passwordSecret.name }}
              key: DATABASE_URL
        - name: GOOGLE_CLOUD_PROJECT
          valueFrom:
            secretKeyRef:
              name: {{ include "cls-backend-application.fullname" . }}-secrets
              key: GOOGLE_CLOUD_PROJECT

        {{- if .Values.probes.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
        {{- end }}

        {{- if .Values.probes.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
        {{- end }}

        resources:
          {{- toYaml .Values.resources | nindent 10 }}

        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}

        # ESO-managed secrets are injected directly as environment variables
        # No volume mounts or wrapper commands needed

      # ESO-only approach: No shared volumes needed

      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
