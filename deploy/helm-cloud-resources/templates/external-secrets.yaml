{{- if .Values.gcp.project }}
---
# Password Generator for Database Password
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: {{ .Values.database.user.passwordSecret.name }}-generator
  namespace: {{ .Values.namespace.name | quote }}
  labels:
    {{- include "cls-backend-cloud-resources.labels" . | nindent 4 }}
spec:
  length: 32
  digits: 8
  symbols: 8
  symbolCharacters: "!@#$%^&*()-_=+[]{}|;:,.<>?"
  noUpper: false
  allowRepeat: true

---
# ExternalSecret to create Kubernetes Secret from Password Generator
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: {{ .Values.database.user.passwordSecret.name }}
  namespace: {{ .Values.namespace.name | quote }}
  labels:
    {{- include "cls-backend-cloud-resources.labels" . | nindent 4 }}
spec:
  # Never refresh automatically - password remains stable
  refreshInterval: "0"
  target:
    name: {{ .Values.database.user.passwordSecret.name }}
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        # Raw password for SQLUser resource
        password: "{{ `{{ .password }}` }}"
        # Complete DATABASE_URL for application consumption
        DATABASE_URL: "postgres://{{ .Values.database.user.name }}:{{ `{{ .password }}` }}@{{ .Values.database.instance.name }}:5432/{{ .Values.database.database.name }}?sslmode=require"
  dataFrom:
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: {{ .Values.database.user.passwordSecret.name }}-generator
{{- else }}
{{- fail "gcp.project is required" }}
{{- end }}
