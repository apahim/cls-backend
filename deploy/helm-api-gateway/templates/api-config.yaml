---
# API Gateway API Config
apiVersion: apigateway.cnrm.cloud.google.com/v1beta1
kind: APIGatewayAPIConfig
metadata:
  name: {{ include "cls-backend-api-gateway.apiConfigId" . }}
  namespace: {{ .Values.namespace.name | quote }}
  labels:
    {{- include "cls-backend-api-gateway.labels" . | nindent 4 }}
spec:
  displayName: {{ include "cls-backend-api-gateway.apiConfigDisplayName" . }}
  apiRef:
    name: {{ .Values.apiGateway.api.name }}
  openapiDocuments:
    - document:
        path: openapi-spec.yaml
        contents: |
          swagger: "2.0"
          info:
            title: "CLS Backend User API (OAuth2)"
            description: |
              User-facing Cluster Lifecycle Service API with Google OAuth2 authentication.

              **USER ACCESS PATTERN:**
              Users → Google API Gateway (OAuth2) → cls-backend (X-User-Email header)

              **CONTROLLER ACCESS PATTERN:**
              Controllers → cls-backend directly (bypass API Gateway)

              This spec covers ONLY user-facing operations through the API Gateway.
              Controller status updates and operational endpoints access the backend directly.

            version: "5.0.0-user-oauth2"
            contact:
              name: CLS Team
              email: cls-backend@redhat.com

          host: placeholder-will-be-updated-after-gateway-creation
          schemes:
            - https
          basePath: /

          # OAuth2 Configuration for Users Only
          securityDefinitions:
            google_oauth2_users:
              type: oauth2
              authorizationUrl: https://accounts.google.com/o/oauth2/auth
              flow: implicit
              x-google-jwks_uri: https://www.googleapis.com/oauth2/v3/certs
              x-google-audiences: {{ .Values.oauth2.clientId | quote }}
              scopes:
                openid: OpenID Connect scope
                email: User email (forwarded as X-User-Email header)
                profile: User profile information

          # Default security (OAuth2 required for all endpoints except health)
          security:
            - google_oauth2_users: [{{ join ", " .Values.oauth2.scopes }}]

          # Backend configuration with external load balancer via nip.io
          x-google-backend:
            address: {{ include "cls-backend-api-gateway.backendAddress" . }}
            deadline: 15.0
            path_translation: APPEND_PATH_TO_ADDRESS

          # CORS configuration
          x-google-cors:
          {{- range .Values.cors.allowedOrigins }}
            - origin: {{ . | quote }}
              methods: {{ $.Values.cors.allowedMethods | toJson }}
              headers: {{ $.Values.cors.allowedHeaders | toJson }}
              maxAge: {{ $.Values.cors.maxAge }}
              allowCredentials: {{ $.Values.cors.allowCredentials }}
          {{- end }}

          # USER-FACING ENDPOINTS ONLY
          paths:
            # Health Check (Public - No Authentication)
            /health:
              get:
                summary: Health check endpoint (Public)
                description: Returns the health status
                operationId: getHealth
                security: []  # Override global security - no auth required
                produces:
                  - application/json
                responses:
                  200:
                    description: Service is healthy
                    schema:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [healthy, degraded, unhealthy]
                        timestamp:
                          type: string
                          format: date-time
                        service:
                          type: string
                  503:
                    description: Service is unhealthy
                    schema:
                      $ref: '#/definitions/ErrorResponse'

            # Cluster Management Endpoints
            /api/v1/clusters:
              get:
                summary: List user's clusters
                description: Retrieve clusters owned by the authenticated user
                operationId: listUserClusters
                produces:
                  - application/json
                parameters:
                  - name: limit
                    in: query
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 50
                    description: Maximum number of clusters to return
                  - name: offset
                    in: query
                    type: integer
                    minimum: 0
                    default: 0
                    description: Number of clusters to skip (pagination)
                  - name: status
                    in: query
                    type: string
                    enum: [Pending, Ready, Error, Deleting, Unknown]
                    description: Filter by cluster status
                responses:
                  200:
                    description: List of user's clusters
                    schema:
                      type: object
                      properties:
                        clusters:
                          type: array
                          items:
                            $ref: '#/definitions/Cluster'
                        total:
                          type: integer
                        limit:
                          type: integer
                        offset:
                          type: integer
                  400:
                    $ref: '#/responses/BadRequest'
                  401:
                    $ref: '#/responses/Unauthorized'
                  500:
                    $ref: '#/responses/InternalError'

              post:
                summary: Create cluster
                description: Create a new cluster for the authenticated user
                operationId: createUserCluster
                consumes:
                  - application/json
                produces:
                  - application/json
                parameters:
                  - name: body
                    in: body
                    required: true
                    schema:
                      $ref: '#/definitions/ClusterCreateRequest'
                responses:
                  201:
                    description: Cluster created successfully
                    schema:
                      $ref: '#/definitions/Cluster'
                  400:
                    $ref: '#/responses/BadRequest'
                  401:
                    $ref: '#/responses/Unauthorized'
                  409:
                    $ref: '#/responses/Conflict'
                  500:
                    $ref: '#/responses/InternalError'

            /api/v1/clusters/{cluster_id}:
              parameters:
                - name: cluster_id
                  in: path
                  required: true
                  type: string
                  format: uuid
                  description: Cluster UUID

              get:
                summary: Get cluster details
                description: Retrieve cluster details (user must own the cluster)
                operationId: getUserCluster
                produces:
                  - application/json
                responses:
                  200:
                    description: Cluster details
                    schema:
                      $ref: '#/definitions/Cluster'
                  400:
                    $ref: '#/responses/BadRequest'
                  401:
                    $ref: '#/responses/Unauthorized'
                  403:
                    $ref: '#/responses/Forbidden'
                  404:
                    $ref: '#/responses/NotFound'
                  500:
                    $ref: '#/responses/InternalError'

              put:
                summary: Update cluster
                description: Update cluster (user must own the cluster)
                operationId: updateUserCluster
                consumes:
                  - application/json
                produces:
                  - application/json
                parameters:
                  - name: body
                    in: body
                    required: true
                    schema:
                      $ref: '#/definitions/ClusterUpdateRequest'
                responses:
                  200:
                    description: Cluster updated successfully
                    schema:
                      $ref: '#/definitions/Cluster'
                  400:
                    $ref: '#/responses/BadRequest'
                  401:
                    $ref: '#/responses/Unauthorized'
                  403:
                    $ref: '#/responses/Forbidden'
                  404:
                    $ref: '#/responses/NotFound'
                  500:
                    $ref: '#/responses/InternalError'

              delete:
                summary: Delete cluster
                description: Delete cluster (user must own the cluster)
                operationId: deleteUserCluster
                produces:
                  - application/json
                parameters:
                  - name: force
                    in: query
                    type: boolean
                    default: false
                    description: Force delete even if cluster has active resources
                responses:
                  202:
                    description: Cluster deletion initiated
                    schema:
                      type: object
                      properties:
                        message:
                          type: string
                        cluster_id:
                          type: string
                  400:
                    $ref: '#/responses/BadRequest'
                  401:
                    $ref: '#/responses/Unauthorized'
                  403:
                    $ref: '#/responses/Forbidden'
                  404:
                    $ref: '#/responses/NotFound'
                  500:
                    $ref: '#/responses/InternalError'

            /api/v1/clusters/{cluster_id}/status:
              parameters:
                - name: cluster_id
                  in: path
                  required: true
                  type: string
                  format: uuid
                  description: Cluster UUID

              get:
                summary: Get cluster status
                description: Retrieve cluster status (user must own the cluster)
                operationId: getUserClusterStatus
                produces:
                  - application/json
                responses:
                  200:
                    description: Cluster status
                    schema:
                      type: object
                      properties:
                        cluster_id:
                          type: string
                          format: uuid
                        status:
                          $ref: '#/definitions/ClusterStatusInfo'
                        controller_status:
                          type: array
                          items:
                            $ref: '#/definitions/ClusterControllerStatus'
                  400:
                    $ref: '#/responses/BadRequest'
                  401:
                    $ref: '#/responses/Unauthorized'
                  403:
                    $ref: '#/responses/Forbidden'
                  404:
                    $ref: '#/responses/NotFound'
                  500:
                    $ref: '#/responses/InternalError'

          # Schema Definitions (simplified for brevity)
          definitions:
            Cluster:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                target_project_id:
                  type: string
                created_by:
                  type: string
                  format: email
                generation:
                  type: integer
                  format: int64
                resource_version:
                  type: string
                spec:
                  type: object
                status:
                  $ref: '#/definitions/ClusterStatusInfo'
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: date-time

            ClusterCreateRequest:
              type: object
              required: [name, spec]
              properties:
                name:
                  type: string
                  pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
                  minLength: 3
                  maxLength: 63
                  description: DNS-compatible cluster name
                target_project_id:
                  type: string
                  description: Target project ID
                spec:
                  type: object

            ClusterUpdateRequest:
              type: object
              required: [spec]
              properties:
                spec:
                  type: object

            ClusterStatusInfo:
              type: object
              properties:
                observedGeneration:
                  type: integer
                  format: int64
                conditions:
                  type: array
                  items:
                    $ref: '#/definitions/Condition'
                phase:
                  type: string
                  enum: [Pending, Progressing, Ready, Failed]
                message:
                  type: string
                reason:
                  type: string
                lastUpdateTime:
                  type: string
                  format: date-time

            Condition:
              type: object
              properties:
                type:
                  type: string
                status:
                  type: string
                  enum: [True, False, Unknown]
                lastTransitionTime:
                  type: string
                  format: date-time
                reason:
                  type: string
                message:
                  type: string

            ClusterControllerStatus:
              type: object
              properties:
                cluster_id:
                  type: string
                  format: uuid
                controller_name:
                  type: string
                observed_generation:
                  type: integer
                  format: int64
                conditions:
                  type: array
                  items:
                    $ref: '#/definitions/Condition'
                metadata:
                  type: object
                last_updated:
                  type: string
                  format: date-time

            ErrorResponse:
              type: object
              required: [error, message, timestamp, request_id]
              properties:
                error:
                  type: string
                  description: Error type
                code:
                  type: string
                  description: Error code
                message:
                  type: string
                  description: Error message
                details:
                  type: string
                  description: Additional error details
                timestamp:
                  type: string
                  format: date-time
                request_id:
                  type: string
                  description: Request ID for tracking

          # Common Response Definitions
          responses:
            BadRequest:
              description: Bad request - validation failed
              schema:
                $ref: '#/definitions/ErrorResponse'

            Unauthorized:
              description: Unauthorized - OAuth2 authentication required
              schema:
                $ref: '#/definitions/ErrorResponse'
              headers:
                WWW-Authenticate:
                  type: string
                  description: 'Bearer realm="CLS Backend OAuth2"'

            Forbidden:
              description: Forbidden - insufficient permissions
              schema:
                $ref: '#/definitions/ErrorResponse'

            NotFound:
              description: Resource not found
              schema:
                $ref: '#/definitions/ErrorResponse'

            Conflict:
              description: Resource conflict
              schema:
                $ref: '#/definitions/ErrorResponse'

            InternalError:
              description: Internal server error
              schema:
                $ref: '#/definitions/ErrorResponse'
  gatewayServiceAccount: projects/{{ .Values.gcp.project }}/serviceAccounts/{{ .Values.gcp.project }}@appspot.gserviceaccount.com